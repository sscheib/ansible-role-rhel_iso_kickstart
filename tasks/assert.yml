---
# NOTE: _quiet_assert does not impact this task, as it first needs to be ensured that it actually is
#       properly defined
- name: 'assert | Ensure mandatory variables, as  well as variables, which have a default value, are set (boolean)'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', item) is defined"
      - "lookup('ansible.builtin.vars', item) | bool | string == lookup('ansible.builtin.vars', item) | string"
      - "lookup('ansible.builtin.vars', item) is boolean"
    success_msg: "Variable '{{ item }}' defined properly - value: '{{ lookup('ansible.builtin.vars', item) }}'"
    fail_msg: "Variable '{{ item }}' failed to validate"
    quiet: '{{ _quiet_assert }}'
  loop:
    - '_validate_kickstart'
    - '_quiet_assert'
    - '_cleanup_iso'
    - '_cleanup_work_dir'
    - '_force_recreate_custom_iso'
    - '_implant_md5'
    - '_enable_fips'
  loop_control:
    label: 'variable: {{ item }}'

- name: 'assert | Ensure mandatory variables, as well as variables, which have a default value, are set (string)'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', item) is defined"
      - "lookup('ansible.builtin.vars', item) is string"
      - "lookup('ansible.builtin.vars', item) != None"
      - "lookup('ansible.builtin.vars', item) != ''"
    success_msg: "Variable '{{ item }}' defined properly - value: '{{ lookup('ansible.builtin.vars', item) }}'"
    fail_msg: "Variable '{{ item }}' failed to validate"
    quiet: '{{ _quiet_assert }}'
  loop:
    - '_download_directory'
    - '_download_directory_owner'
    - '_download_directory_group'
    - '_download_directory_mode'
    - '_ksvalidator_package_name'
    - '_temporary_mount_path'
    - '_temporary_work_dir_path'
    - '_temporary_work_dir_path_owner'
    - '_temporary_work_dir_path_group'
    - '_temporary_work_dir_path_mode'
    - '_temporary_work_dir_source_files_path'
    - '_temporary_work_dir_source_files_path_owner'
    - '_temporary_work_dir_source_files_path_group'
    - '_temporary_work_dir_source_files_path_mode'
    - '_dest_dir_path'
    - '_dest_dir_path_owner'
    - '_dest_dir_path_group'
    - '_dest_dir_path_mode'
    - '_xorriso_package_name'
    - '_rsync_package_name'
    - '_isolinux_bin_path'
    - '_boot_cat_path'
    - '_pxelinux_cfg_path'
    - '_iso_owner'
    - '_iso_group'
    - '_iso_mode'
    - '_custom_iso_owner'
    - '_custom_iso_group'
    - '_custom_iso_mode'
    - '_implantisomd5_package_name'
    - '_checksum'
    - '_grub_cfg_path'
  loop_control:
    label: 'variable: {{ item }}'

- name: 'assert | Ensure mandatory variables, as well as variables, which have a default value, are set (integer)'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', item) is defined"
      - "lookup('ansible.builtin.vars', item) | int | string == lookup('ansible.builtin.vars', item) | string"
      - "lookup('ansible.builtin.vars', item) | int is number"
      - "lookup('ansible.builtin.vars', item) | int is integer"
      - "lookup('ansible.builtin.vars', item) | int >= 0"
    success_msg: "Variable '{{ item }}' defined properly - value: '{{ lookup('ansible.builtin.vars', item) }}'"
    fail_msg: "Variable '{{ item }}' failed to validate"
    quiet: '{{ _quiet_assert }}'
  loop:
    - '_download_timeout'
    - '_grub_menu_selection_timeout'
  loop_control:
    label: 'variable: {{ item }}'

- name: 'assert | Ensure kickstart path is set when defined'
  ansible.builtin.assert:
    that:
      - '_kickstart_path is string'
      - "_kickstart_path != ''"
      - '_kickstart_path != None'
    success_msg: "Variable '_kickstart_path' defined properly - value: '{{ _kickstart_path }}'"
    fail_msg: "Variable '_kickstart_path' failed to validate"
    quiet: '{{ _quiet_assert }}'
  when: '_kickstart_path is defined'

- name: 'assert | Ensure kickstart root password is set when defined'
  ansible.builtin.assert:
    that:
      - '_kickstart_root_password is string'
      - "_kickstart_root_password != ''"
      - '_kickstart_root_password != None'
    success_msg: "Variable '_kickstart_root_password' defined properly"
    fail_msg: "Variable '_kickstart_root_password' failed to validate"
    quiet: '{{ _quiet_assert }}'
  no_log: true
  when: '_kickstart_root_password is defined'

- name: 'assert | Ensure api_token is defined properly (string)'
  ansible.builtin.assert:
    that:
      - '_api_token is defined'
      - '_api_token is string'
      - '_api_token != None'
      - "_api_token != ''"
    success_msg: "Variable '_api_token' defined properly"
    fail_msg: "Variable '_api_token' failed to validate"
    quiet: '{{ _quiet_assert }}'
  no_log: true

- name: 'assert | Ensure optional variables, are defined properly, if set (list)'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __var) is defined"
      - "lookup('ansible.builtin.vars', __var) | list | string == lookup('ansible.builtin.vars', __var) | string"
      - "lookup('ansible.builtin.vars', __var) is sequence"
    success_msg: "Variable '{{ __var }}' defined properly"
    fail_msg: "Variable '{{ __var }}' failed to validate"
    quiet: '{{ _quiet_assert }}'
  no_log: true
  when: >
    lookup('ansible.builtin.vars', __var, default='') != '' and
    lookup('ansible.builtin.vars', __var, default='') | length > 0
  loop:
    - '_users'
    - '_post_sections'
  register: '__tmp_list_variables'
  loop_control:
    loop_var: '__var'
    label: 'variable: {{ __var }}'

- name: 'assert | Ensure optional string variables are defined properly - if defined'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __var) is defined"
      - "lookup('ansible.builtin.vars', __var) is string"
      - "lookup('ansible.builtin.vars', __var) != None"
      - "lookup('ansible.builtin.vars', __var) != ''"
    success_msg: "Variable '{{ __var }}' defined properly - value: '{{ lookup('ansible.builtin.vars', __var) }}'"
    fail_msg: "Variable '{{ __var }}' failed to validate"
    quiet: '{{ _quiet_assert }}'
  when: >-
    lookup('ansible.builtin.vars', __var, default='') is defined
    and lookup('ansible.builtin.vars', __var, default='') != ''
    and lookup('ansible.builtin.vars', __var, default='') != None
  loop:
    - '_dest_iso_filename'
  loop_control:
    loop_var: '__var'
    label: 'variable: {{ __var }}'

- name: 'assert | Ensure post_sections are defined properly'
  ansible.builtin.assert:
    that:
      - '_section.name is defined'
      - '_section.name is string'
      - '_section.name != None'
      - "_section.name != ''"

      - '_section.template is defined'
      - '_section.template is string'
      - '_section.template != None'
      - "_section.template != ''"

      # load the template to see if it exists
      - "lookup('template', _section.template) | length > 0"

  loop: '{{ _post_sections }}'
  loop_control:
    loop_var: '_section'
  when: >
    _post_sections is defined
    and _post_sections | length > 0

- name: 'assert | Ensure _users is defined properly'
  ansible.builtin.assert:
    that:
      # _user.name
      - '_user.name is defined'
      - '_user.name is string'
      - '_user.name != None'
      - "_user.name != ''"

      # _user.gecos
      - '(_user.gecos is defined) | ternary(_user.gecos | default(None) is string, true)'
      - '(_user.gecos is defined) | ternary(_user.gecos | default(None) != None, true)'
      - "(_user.gecos is defined) | ternary(_user.gecos | default(None) != '', true)"

      # _user.shell
      - '(_user.shell is defined) | ternary(_user.shell | default(None) is string, true)'
      - '(_user.shell is defined) | ternary(_user.shell | default(None) != None, true)'
      - "(_user.shell is defined) | ternary(_user.shell | default(None) != '', true)"

      # _user.home
      - '(_user.home is defined) | ternary(_user.home | default(None) is string, true)'
      - '(_user.home is defined) | ternary(_user.home | default(None) != None, true)'
      - "(_user.home is defined) | ternary(_user.home | default(None) != '', true)"

      # _user.password
      - '(_user.password is defined) | ternary(_user.password | default(None) is string, true)'
      - '(_user.password is defined) | ternary(_user.password | default(None) != None, true)'
      - "(_user.password is defined) | ternary(_user.password | default(None) != '', true)"

      # _user.gid
      - >-
          (_user.gid is defined) | ternary(_user.gid | default(None) | int | string
          == _user.gid | default(None) | string, true)
      - '(_user.gid is defined) | ternary(_user.gid | default(None) is number, true)'
      - '(_user.gid is defined) | ternary(_user.gid | default(None) is integer, true)'
      - '(_user.gid is defined) | ternary(_user.gid | default(None) >= 1, true)'

      # _user.uid
      - >-
          (_user.uid is defined) | ternary(_user.uid | default(None) | int | string
          == _user.uid | default(None) | string, true)
      - '(_user.uid is defined) | ternary(_user.uid | default(None) is number, true)'
      - '(_user.uid is defined) | ternary(_user.uid | default(None) is integer, true)'
      - '(_user.uid is defined) | ternary(_user.uid | default(None) >= 1, true)'

      # _user.create_user_group
      - >-
          (_user.create_user_group is defined) | ternary(_user.create_user_group | default(None) | bool | string
          == _user.create_user_group | default(None) | string, true)
      - '(_user.create_user_group is defined) | ternary(_user.create_user_group | default(None) is boolean, true)'

      # _user.lock
      - >-
          (_user.lock is defined) | ternary(_user.lock | default(None) | bool | string
          == _user.lock | default(None) | string, true)
      - '(_user.lock is defined) | ternary(_user.lock | default(None) is boolean, true)'

      # _user.privileged
      - >-
          (_user.privileged is defined) | ternary(_user.privileged | default(None) | bool | string
          == _user.privileged | default(None) | string, true)
      - '(_user.privileged is defined) | ternary(_user.privileged | default(None) is boolean, true)'

      # _user.groups
      - >-
          (_user.groups is defined) | ternary(_user.groups | default([]) | list | string
          == _user.groups | default(None) | string, true)
      - '(_user.groups is defined) | ternary(_user.groups | default([]) is sequence, true)'

      # _user.authorized_keys
      - >-
          (_user.authorized_keys is defined) | ternary(_user.authorized_keys | default([]) | list | string
          == _user.authorized_keys | default(None) | string, true)
      - '(_user.authorized_keys is defined) | ternary(_user.authorized_keys | default([]) is sequence, true)'
    success_msg: 'Users are defined correctly'
    fail_msg: 'One or more users failed to validated correctly'
  no_log: true
  loop: '{{ _users }}'
  loop_control:
    loop_var: '_user'
  when: >
    _users is defined
    and _users | length > 0

- name: 'assert | Ensure _users does not specify conflicting options'
  ansible.builtin.assert:
    that:
      - '_user.home is defined'
      - '_user.home is string'
      - "_user.home != ''"
      - '_user.home != None'
    success_msg: 'No conflicting options specified'
    fail_msg: 'A user needs a home directory when authorized keys are specified'
  no_log: true
  loop: '{{ _users }}'
  loop_control:
    loop_var: '_user'
  when: >
    _user.authorized_keys is defined
    and _user.authorized_keys | length > 0

- name: 'assert | Skip block if no variables defined beforehand'
  when: >
    __tmp_list_variables.results is defined and
    __tmp_list_variables.results | map(attribute='skipped', default=[]) | select() | length > 0
  block:

    - name: 'assert | Show variables that have been skipped to check, due to being undefined'
      ansible.builtin.debug:
        msg: 'Variable name: {{ __var }}'
      loop:
        - "{{ __tmp_list_variables['results'] | default([]) }}"
      loop_control:
        loop_var: '__var'
        label: '{{ __var }}'

    - name: 'assert | Ensure above variables are not important to you, as they are not going to be used!'
      ansible.builtin.pause:
        seconds: 5
...
